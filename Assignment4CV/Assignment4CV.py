# -*- coding: utf-8 -*-
"""Assignment4CV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Unj9zuwIW-ex-l6S72fjG9A2b2mpJCit

Block Matching (SSD & SAD)
"""

import numpy as np
import cv2
import numpy as np
from google.colab import drive        
from matplotlib import pyplot as plt
from google.colab.patches import cv2_imshow
import math

drive.mount('/content/gdrive')
root_path = 'gdrive/My Drive/'


def best_match_ssd(patch,strip) :
  min_dif =np.inf
  best_x=[]
  for x in range (0,strip.shape[1]-patch.shape[1]):
    other_patch=strip[:,x:(x+patch.shape[1])]
    diff= np.sum(np.square(np.subtract(patch, other_patch)))
    
    if diff<min_dif:
      min_dif=diff
      best_x=x  
  return best_x

def best_match_sad(patch,strip) :
  min_dif =np.inf
  best_x=[]
  for x in range (0,strip.shape[1]-patch.shape[1]):
    other_patch=strip[:,x:(x+patch.shape[1])]
    diff= np.sum(np.abs(np.subtract(patch, other_patch)))
    
    if diff<min_dif:
      min_dif=diff
      best_x=x 
  
  return best_x

def match_strips(ls,rs,k):
  numofblocks=math.floor((ls.shape[1]))
  disp=np.zeros(numofblocks)
  for block in range(0,numofblocks-1):
    x_left=block
    patch_left=ls[:,x_left:(x_left+k-1)]
    #cv2_imshow(patch_left)
    x_right=best_match_sad(patch_left,rs)
    #print('once')
    disp[block]=x_left-x_right
  return disp



#read the input images of the 2 views as gray-scale images
img_lft_x = cv2.imread('/content/gdrive/My Drive/im2.png', 0)
img_rght_x= cv2.imread('/content/gdrive/My Drive/im6.png', 0)

img_lft2 = np.asarray(cv2.imread('/content/gdrive/My Drive/im2.png', 0))
img_rght2 = np.asarray(cv2.imread('/content/gdrive/My Drive/im6.png', 0))

cv2_imshow(img_lft2)
k=9
w,h=img_lft2.shape
print(w,h)

disp_map_lft = np.zeros((w, h))
i=0
j=0
mydisp=np.zeros(450)

for x in range (k,w+k):
  
      strip_right=img_rght2[x-k:x,0:h]
      strip_left=img_lft2[x-k:x,0:h]
      disparity=match_strips(strip_left,strip_right,k)
      mydisp=np.vstack((mydisp,disparity))
      
     
cv2_imshow(mydisp)

"""Dynamic Programming"""

import numpy as np
import cv2
from google.colab.patches import cv2_imshow
    
def stereoMatching(leftImg, rightImg):
    rows = leftImg.shape[0]
    cols = leftImg.shape[1]

    Disp = np.zeros((rows,cols))
    occ = 1
    
    # Scanline to be matched
    for c in range (rows):
        # Cost matrix 
        colMat=np.zeros((cols,cols))
        
        # Disparity matrix
        dispMat=np.zeros((cols,cols))

        # Initialize the cost matrix 
        for i in range(0,cols):
            colMat[i][0] = i*occ
            colMat[0][i] = i*occ

        # Iterate the row in both the images to find the path
        for k in range (1,cols):
            for l in range(1,cols):        
                match_cost = np.square(leftImg[c][k]-rightImg[c][l])
                match_cost = match_cost/4
                
                # Finding minimum cost    
                min1 = colMat[k-1][l-1]+match_cost
                min2 = colMat[k-1][l]+occ
                min3 = colMat[k][l-1]+occ
                
                colMat[k][l] = cmin = min(min1,min2,min3)
                
                # Marking the path 
                if(min1 == cmin):
                    dispMat[k][l] = 1
                if(min2 == cmin):
                    dispMat[k][l] = 2
                if(min3 == cmin):
                    dispMat[k][l] = 3
        
        # Iterate the matched path and update the disparity value
        i = cols - 1
        j = cols - 1
        
        while (i!=0) and  (j!=0):
            if(dispMat[i][j] == 1):
                Disp[c][i] = 0
                i = i-1
                j = j-1
            elif(dispMat[i][j] == 2):
                Disp[c][i] = 255
                i = i-1
            elif(dispMat[i][j] == 3):
                Disp[c][i] = -255
                j = j-1
            #print(Disp[c][i])

    print(Disp.shape)
    cv2_imshow(Disp)
        
# Read images.
leftImg = cv2.imread("left_tsukuba.jpg",0)
leftImg = np.asarray(leftImg, dtype=np.uint8) 
rightImg = cv2.imread("right_tsukuba.jpg",0)
rightImg = np.asarray(rightImg, dtype=np.uint8)
# Call disparity matching algorithm
stereoMatching(leftImg, rightImg)